using System;
using System.IO;
using System.Xml.Linq;
using RfgTools.Helpers.Gibbed.Volition.FileFormats;

namespace RfgTools.Formats.Zones.Interfaces
{
    public interface IProperty
    {
        bool ReadFromStream(Stream stream, ushort type, ushort size, uint nameHash);
        void WriteToStream(Stream stream);
        void ReadFromXml(XElement propertyRoot, ushort type, ushort size, uint nameHash);
        XElement WriteToXml();

        //Todo: See if these two can be merged with the Type and Name values that most properties have
        string GetFullName();
        string GetTypeName();

        //Todo: Add WriteDescriptionToXml(). A function that writes a properties description to xml. Useful for tooling and also for autogenerated docs
    }

    [AttributeUsage(AttributeTargets.Class)]
    public class PropertyAttribute : Attribute
    {
        /// <summary>
        /// String used to generate the properties name hash.
        /// This must be the same value used by the game for it to work properly.
        /// </summary>
        public readonly string Name; 
        /// <summary>
        /// The type value used for this property by the game.
        /// </summary>
        public readonly uint Type; //Todo: Figure out exact meaning of types, make enum
        /// <summary>
        /// The name hash for this property used by this game. It's generated from
        /// the name string at runtime because it makes the code easier to read.
        /// <para>However, in the rfgzone_pc and layer_pc files you'll only see this value,
        /// and not the name string.</para>
        /// </summary>
        public readonly uint NameHash;

        public PropertyAttribute(string name, uint type)
        {
            Name = name;
            Type = type;
            NameHash = name.HashVolitionCRC(0);
        }
    }
}